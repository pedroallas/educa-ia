import { useState } from "react";
import { Send, Sparkles, Copy, Check } from "lucide-react";
import { Button } from "./ui/button";
import { Textarea } from "./ui/textarea";

interface SimulatorExample {
  prompt: string;
  response: string;
  quality: "poor" | "good" | "excellent";
}

/**
 * Simulador de Prompts Interativo
 * Permite aos usu√°rios testar e comparar diferentes prompts
 * Fornece feedback sobre a qualidade e sugest√µes de melhoria
 */
export const PromptSimulator = () => {
  const [userPrompt, setUserPrompt] = useState("");
  const [response, setResponse] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [copied, setCopied] = useState(false);

  // Exemplos de prompts com respostas simuladas
  const examples: SimulatorExample[] = [
    {
      prompt: "Me ajude",
      response:
        "‚ö†Ô∏è Prompt muito vago! Tente ser mais espec√≠fico sobre o que voc√™ precisa.\n\nSugest√£o: 'Me ajude a criar um plano de estudos para aprender React.js em 3 meses, estudando 2 horas por dia.'",
      quality: "poor",
    },
    {
      prompt: "Explique intelig√™ncia artificial",
      response:
        "‚úÖ Bom prompt, mas pode melhorar!\n\nResposta simulada: Intelig√™ncia Artificial √© um campo da ci√™ncia da computa√ß√£o que desenvolve sistemas capazes de realizar tarefas que normalmente requerem intelig√™ncia humana...\n\nüí° Sugest√£o de melhoria: 'Explique intelig√™ncia artificial de forma simples para um estudante do ensino m√©dio, usando exemplos do cotidiano.'",
      quality: "good",
    },
    {
      prompt:
        "Atue como um professor de programa√ß√£o. Explique o conceito de loops em Python para um iniciante, usando exemplos pr√°ticos e analogias do dia a dia. Inclua um exemplo de c√≥digo comentado.",
      response:
        "üåü Excelente prompt! Voc√™ incluiu:\n‚úì Papel/contexto (professor)\n‚úì P√∫blico-alvo (iniciante)\n‚úì Formato desejado (exemplos pr√°ticos + analogias)\n‚úì Especifica√ß√£o t√©cnica (c√≥digo comentado)\n\nResposta simulada:\nClaro! Vou explicar loops de uma forma bem did√°tica.\n\nPense em loops como tarefas repetitivas do seu dia. Por exemplo, quando voc√™ escova os dentes, voc√™ repete o movimento v√°rias vezes at√© completar a tarefa.\n\nEm Python, usamos loops para repetir a√ß√µes:\n\n```python\n# Loop que conta at√© 5\nfor numero in range(1, 6):\n    print(f'Contando: {numero}')\n    # Isso vai imprimir 1, 2, 3, 4, 5\n```",
      quality: "excellent",
    },
  ];

  const analyzePrompt = (prompt: string): SimulatorExample => {
    const lowerPrompt = prompt.toLowerCase();

    // Verifica√ß√µes de qualidade
    const hasContext =
      lowerPrompt.includes("atue como") ||
      lowerPrompt.includes("voc√™ √©") ||
      lowerPrompt.includes("imagine que");
    const hasSpecifics =
      prompt.length > 50 &&
      (lowerPrompt.includes("para") ||
        lowerPrompt.includes("com") ||
        lowerPrompt.includes("usando"));
    const hasFormat =
      lowerPrompt.includes("exemplo") ||
      lowerPrompt.includes("lista") ||
      lowerPrompt.includes("passo a passo");

    if (prompt.length < 10) {
      return {
        prompt,
        response:
          "‚ö†Ô∏è Prompt muito curto! Prompts mais detalhados geram respostas melhores.\n\nDica: Adicione contexto, seja espec√≠fico sobre o que precisa e mencione o formato desejado da resposta.",
        quality: "poor",
      };
    }

    if (hasContext && hasSpecifics && hasFormat) {
      return {
        prompt,
        response:
          "üåü Excelente prompt! Voc√™ incluiu:\n‚úì Contexto/papel claro\n‚úì Detalhes espec√≠ficos\n‚úì Formato de resposta definido\n\nEste tipo de prompt geraria respostas de alta qualidade em um modelo de IA real. Continue assim!",
        quality: "excellent",
      };
    }

    if (hasContext || hasSpecifics) {
      return {
        prompt,
        response:
          "‚úÖ Bom prompt! Voc√™ est√° no caminho certo.\n\nüí° Sugest√µes para melhorar:\n" +
          (!hasContext ? "‚Ä¢ Adicione contexto (ex: 'Atue como um especialista...')\n" : "") +
          (!hasSpecifics ? "‚Ä¢ Seja mais espec√≠fico sobre o que precisa\n" : "") +
          (!hasFormat ? "‚Ä¢ Especifique o formato da resposta desejada\n" : ""),
        quality: "good",
      };
    }

    return {
      prompt,
      response:
        "‚ö†Ô∏è Prompt b√°sico. Funciona, mas pode melhorar muito!\n\nüí° Dicas:\n‚Ä¢ Adicione contexto (papel/persona)\n‚Ä¢ Seja mais espec√≠fico\n‚Ä¢ Defina o formato desejado\n‚Ä¢ Mencione o p√∫blico-alvo\n\nExemplo: 'Atue como um nutricionista. Crie um plano alimentar vegetariano para ganho de massa muscular, para uma pessoa de 25 anos que treina 4x por semana. Apresente em formato de tabela.'",
      quality: "poor",
    };
  };

  const handleSubmit = async () => {
    if (!userPrompt.trim()) return;

    setIsProcessing(true);
    setResponse("");

    // Simula processamento
    await new Promise((resolve) => setTimeout(resolve, 1500));

    const result = analyzePrompt(userPrompt);
    setResponse(result.response);
    setIsProcessing(false);
  };

  const handleCopy = async () => {
    await navigator.clipboard.writeText(userPrompt);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const loadExample = (example: SimulatorExample) => {
    setUserPrompt(example.prompt);
    setResponse("");
  };

  return (
    <div className="bg-gradient-to-br from-card to-card/50 border border-border rounded-xl p-6 md:p-8 shadow-lg">
      <div className="mb-6">
        <h3 className="text-xl font-bold text-foreground mb-2 flex items-center gap-2">
          <Sparkles className="text-primary" size={24} />
          Simulador de Prompts
        </h3>
        <p className="text-sm text-muted-foreground">
          Teste seus prompts e receba feedback instant√¢neo sobre como melhor√°-los
        </p>
      </div>

      {/* Exemplos r√°pidos */}
      <div className="mb-4">
        <p className="text-xs text-muted-foreground mb-2 font-semibold">
          Experimente estes exemplos:
        </p>
        <div className="flex flex-wrap gap-2">
          {examples.map((example, index) => (
            <Button
              key={index}
              variant="outline"
              size="sm"
              onClick={() => loadExample(example)}
              className="text-xs"
            >
              Exemplo {index + 1}
            </Button>
          ))}
        </div>
      </div>

      {/* Input Area */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-foreground mb-2">Seu Prompt:</label>
        <Textarea
          value={userPrompt}
          onChange={(e) => setUserPrompt(e.target.value)}
          placeholder="Digite seu prompt aqui... Ex: 'Atue como um especialista em marketing digital e me ajude a criar uma estrat√©gia para Instagram...'"
          className="min-h-[120px] resize-none"
          disabled={isProcessing}
        />
        <div className="flex items-center justify-between mt-2">
          <span className="text-xs text-muted-foreground">{userPrompt.length} caracteres</span>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleCopy}
            disabled={!userPrompt}
            className="text-xs"
          >
            {copied ? (
              <>
                <Check size={14} className="mr-1" /> Copiado
              </>
            ) : (
              <>
                <Copy size={14} className="mr-1" /> Copiar
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Submit Button */}
      <Button
        onClick={handleSubmit}
        disabled={!userPrompt.trim() || isProcessing}
        className="w-full mb-4"
      >
        {isProcessing ? (
          <>
            <div className="animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
            Analisando...
          </>
        ) : (
          <>
            <Send size={18} className="mr-2" />
            Analisar Prompt
          </>
        )}
      </Button>

      {/* Response Area */}
      {response && (
        <div className="p-4 bg-secondary/50 rounded-lg border border-border animate-in fade-in slide-in-from-bottom-4 duration-500">
          <p className="text-sm font-semibold text-foreground mb-2">üìä An√°lise do Prompt:</p>
          <div className="text-sm text-muted-foreground whitespace-pre-line">{response}</div>
        </div>
      )}
    </div>
  );
};
